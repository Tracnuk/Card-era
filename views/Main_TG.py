import asyncio
import sys
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

# === –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π ===
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from game.battle import *
from game.game import Game
from helpers.const import *
from models.user_registration import UserRegistrationDTO

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8329664891:AAFuF4HaqWaAvzeFZJCNTped-eqWuwjO9pA"  
game = Game()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class RegisterStates(StatesGroup):
    nickname = State()
    login = State()
    password = State()
    name = State()


class LoginStates(StatesGroup):
    login = State()
    password = State()


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
def get_register_menu():
    kb = [
        [InlineKeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
        [InlineKeyboardButton(text="üîê –í—Ö–æ–¥", callback_data="login")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_user")],
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="current_user")],
        [InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="all_users")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


# === –ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é ===
def get_game_menu():
    kb = [
        [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ä–µ–Ω–∞", callback_data="arena")],
        [InlineKeyboardButton(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="exit")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_register_menu())


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
@dp.callback_query(F.data == "register")
async def register_user(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º:")
    await state.set_state(RegisterStates.nickname)


@dp.message(F.text, RegisterStates.nickname)
async def get_nickname(message: types.Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    await state.set_state(RegisterStates.login)


@dp.message(F.text, RegisterStates.login)
async def get_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(RegisterStates.password)


@dp.message(F.text, RegisterStates.password)
async def get_password(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
    await state.set_state(RegisterStates.name)


@dp.message(F.text, RegisterStates.name)
async def get_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_data = UserRegistrationDTO(
        nickname=data['nickname'],
        login=data['login'],
        password=data['password'],
        first_name=message.text
    )
    result = game.register(user_data)
    await message.answer(result, reply_markup=get_register_menu())
    await state.clear()


# === –í—Ö–æ–¥ ===
@dp.callback_query(F.data == "login")
async def login_user(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    await state.set_state(LoginStates.login)


@dp.message(F.text, LoginStates.login)
async def get_login_input(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(LoginStates.password)


@dp.message(F.text, LoginStates.password)
async def get_password_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    result = game.login(data['login'], message.text)
    await message.answer(result, reply_markup=get_register_menu())
    await state.clear()


# === –ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é ===
@dp.callback_query(F.data == "play")
async def play(callback: types.CallbackQuery):
    if game.verification():
        await callback.message.answer("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!", reply_markup=get_game_menu())
    else:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query(F.data == "arena")
async def arena_cb(callback: types.CallbackQuery):
    arena()
    await callback.message.answer("‚öîÔ∏è –ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å!")


@dp.callback_query(F.data == "inventory")
async def inventory_cb(callback: types.CallbackQuery):
    inventory()
    await callback.message.answer("üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ—Ç–∫—Ä—ã—Ç!")


@dp.callback_query(F.data == "settings")
async def settings_cb(callback: types.CallbackQuery):
    settings()
    await callback.message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã!")


@dp.callback_query(F.data == "shop")
async def shop_cb(callback: types.CallbackQuery):
    shop()
    await callback.message.answer("üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!")


@dp.callback_query(F.data == "exit")
async def exit_cb(callback: types.CallbackQuery):
    await callback.message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_register_menu())


# === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===
@dp.callback_query(F.data == "current_user")
async def current_user(callback: types.CallbackQuery):
    user = game.get_current_user()
    await callback.message.answer(f"üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n{user}")


@dp.callback_query(F.data == "all_users")
async def all_users(callback: types.CallbackQuery):
    users = game.get_all_users()
    text = "\n\n".join([str(u) for group in users for u in group])
    await callback.message.answer(f"üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{text}")


# === –£–¥–∞–ª–µ–Ω–∏–µ ===
@dp.callback_query(F.data == "delete_user")
async def delete_user(callback: types.CallbackQuery):
    result = game.delete_user()
    await callback.message.answer(result, reply_markup=get_register_menu())


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
